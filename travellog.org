#+STARTUP: hideblocks

Find the GeoJSON file.

#+NAME: geojson-file
#+BEGIN_SRC sh
ls . | grep .geojson | head -n 1
#+END_SRC

Load the travel log from the GeoJSON file, so we can edit it.

#+BEGIN_SRC ruby :var travellog=travellog geojson_file=geojson-file
require 'json'
require 'date'

if travellog == 'nil'
  geojson = JSON.parse open(geojson_file).read
  destinations = geojson['features'].select do |entry|
    entry['geometry']['type'] == 'Point'
  end

  destinations.map do |dest|
    prp = dest['properties']
    org_date, location, remarks = prp['Date'], prp['Location'], prp['Remarks']
    date = Date.parse org_date
    [date.strftime('<%Y-%m-%d %a>'), location, remarks || '']
  end
else
  travellog
end
#+END_SRC

#+NAME: travellog
#+RESULTS:

Warm the cache from the GeoJSON file.

#+BEGIN_SRC ruby :var travellog=travellog cache=geo-cache geojson_file=geojson-file
require 'json'
require 'geocoder'

if cache != 'nil'
  cache = Hash[cache.map do |item|
                 location, lng, lat = item
                 [location, [lng, lat]]
               end]
else
  raw = JSON.parse open(geojson_file).read
  destinations = raw['features'].select do |entry|
    entry['geometry']['type'] == 'Point'
  end

  cache = Hash[destinations.map do |dest|
                 location = dest['properties']['Location']
                 coordinates = dest['geometry']['coordinates']
                 [location, coordinates]
               end]
end


# Remove invalid values from cache
cache.select! do |_, coords|
  begin
    coords.each { |coord| Float(coord) }
  rescue ArgumentError # invalid value for Float()
  end
end

distinct_locations = travellog.map do |entry|
  _, location = entry
  location
end

distinct_locations.uniq!
distinct_locations.sort!

distinct_locations.map do |location|
  unless lnglat = cache[location]
    begin
      geo = Geocoder.search location
      loc = geo.first.geometry['location']
      lnglat = [loc['lng'], loc['lat']]
    rescue => e
      lnglat = [e.inspect, ""]
    end
  end

  [location, *lnglat]
end.compact
#+END_SRC

#+NAME: geo-cache
#+RESULTS:

Turn the travellog table into GeoJSON using the geo-cache table.

#+HEADER: :var travellog=travellog geo_cache=geo-cache geojson_file=geojson-file
#+HEADER: :results silent
#+BEGIN_SRC ruby
require 'date'
require 'json'

geo = Hash[geo_cache.map do |entry|
             location, lng, lat = entry
             [location, [lng, lat]]
           end]

features = []
travellog << nil
travellog.each_cons(2) do |entry, cons_entry|
  org_date, location, remarks = entry

  # Raise if coord is invalid
  geo[location].each do |coord|
    Float(coord)
  end

  date = Date.parse org_date

  properties = { Location: location }
  properties[:Remarks] = remarks unless remarks.empty?
  properties['Arrival date'] = date

  features << {
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: geo[location]
    },
    properties: properties
  }

  if cons_entry
    cons_org_date, cons_location = cons_entry
    cons_date = Date.parse cons_org_date

    features.last[:properties]['Departure date'] = cons_date

    features << {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: [geo[location], geo[cons_location]]
      },
      properties: {
        'Origin' => location,
        'Destination' => cons_location,
        'Arrival date' => cons_date
      }
    }
  end
end

output = JSON.pretty_generate(
  type: 'FeatureCollection',
  features: features
)

open(geojson_file, 'w') { |f| f.write output }
#+END_SRC

Push the GeoJSON file to GitHub.

#+BEGIN_SRC sh :results silent :var GEOJSON_FILE=geojson-file
git commit -m 'Update travellog' $GEOJSON_FILE
git push
#+END_SRC
